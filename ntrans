#!/usr/bin/env python3

# ntrans - nano wrapper for translate-shell with some features:
#
#   1. Auto determine direction of translation: en:rus <=> rus:en.
#   2. Copy translation to clipboard.
#   3. Send notify message.
#   4. Grab statistics of translated texts into ~/Dropbox/Public/dictionary.db.
#

__version__ = "1.1.3"

import os
import sys
import optparse
import subprocess
from sqlalchemy import *
from sqlalchemy.exc import NoSuchTableError
from sqlalchemy.orm import mapper
from sqlalchemy.orm.session import sessionmaker
import re
from os.path import expanduser

class Dictionary:
    class Dictionary:
        id = Column(Integer, primary_key=True)
        original = Column(String())
        translated = Column(String())
        direction = Column(String())

        def __init__(self, original, translated, direction):
            self.original = original
            self.translated = translated
            self.direction = direction

        def __repr__(self):
            return '%s %s %s %s' % (self.id, self.original, self.translated, self.direction)

    def __init__(self):
        self.engine = create_engine('sqlite:///' + expanduser("~") + '/Dropbox/Public/dictionary.db')
        self.meta = MetaData(bind=self.engine)

        try:
            self.table = Table('dictionary', self.meta, autoload=True)

        except NoSuchTableError:
            self.table = Table('dictionary', self.meta,
                               Column('id', Integer, primary_key=True),
                               Column('original', String()),
                               Column('translated', String()),
                               Column('direction', String()),
                               )

            self.table.create()

        mapper(self.Dictionary, self.table)
        Session = sessionmaker(bind=self.engine)

        self.session = Session()

    def save(self, original, translated, direction):
        obj = self.Dictionary(original=original, translated=translated, direction=direction)

        self.session.add(obj)
        self.session.commit()


def get_direction(text):
    en = re.match(r'[a-zA-z]+', text)

    if en is not None:
        return 'en:ru'

    return 'ru:en'


def copy_to_clipboard(text):
    os.system("echo '" + text + "' | tr -d '\n' | xclip -selection c")


def save_to_database(original, translated):
    (Dictionary()).save(original, translated, get_direction(original))


def notify_message(text):
    os.system('notify-send "' + text + '"')


def translate(text):
    try:
        return subprocess.check_output(["trans", get_direction(text), "-b", "%s" % text]).decode("utf-8")
    except FileNotFoundError as e:
        print("Install 'translate-shell' for text translation.")
        sys.exit(1)


def main():
    optparse.OptionParser.format_description = lambda self, formatter: self.description
    parser = optparse.OptionParser(description='ntrans is nano wrapper for translate-shell with some features:\n'
                                               '\t1. Auto determine direction of translation: '
                                               'en:rus <=> rus:en.\n'
                                               '\t2. Copy translation to clipboard.\n'
                                               '\t3. Send notify message.\n'
                                               '\t4. Grab statistics of translated texts into '
                                               '~/Dropbox/Public/dictionary.db.\n'
                                   ,
                                   usage="usage: %prog [-h] text",
                                   version="%prog {}".format(__version__))

    parser.add_option("--trans-update", action="store_true", dest="trans_update",
                      help="update translate shell to the latest version")

    parser.add_option("--self-update", action="store_true", dest="self_update",
                      help="update ntrans to the latest version")

    (options, args) = parser.parse_args()

    if options.trans_update:
        print('Updating trans...')

        try:
            file_path = subprocess.check_output(["which", "trans"]).strip().decode("utf-8")
            dir_path = os.path.dirname(file_path)

            os.system('rm {}'.format(file_path))
            os.system('cd {} && wget git.io/trans && chmod +x trans'.format(dir_path))

            exit(0)

        except subprocess.CalledProcessError as ex:
            print(ex)
            exit(1)

    if options.self_update:
        print('Self updating...')

        file_path = os.path.realpath(__file__)
        dir_path = os.path.dirname(file_path)
        base_filename = os.path.basename(file_path)

        os.system('rm {}'.format(file_path))
        os.system('cd {} && wget git.io/vCb3W -O ntrans && chmod +x {}'.format(dir_path, base_filename))
        exit(0)

    if len(args) == 0:
        parser.print_help()
        exit(0)

    original = ' '.join(args)
    translated = translate(original)

    copy_to_clipboard(translated)
    save_to_database(original, translated)
    notify_message(translated)

    print(translated)


if __name__ == "__main__":
    main()
